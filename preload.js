const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld('electronAPI', {
    startBot: () => ipcRenderer.send('start-bot'),
    startBing: () => ipcRenderer.send('start-bing'),
    setBingEmail: (val) => ipcRenderer.send('set-bing-email', val),
    setBingPassword: (val) => ipcRenderer.send('set-bing-password', val),
    setBingDownloadPath: (val) => ipcRenderer.send('set-bing-download-path', val),
    setMode: (val) =>  ipcRenderer.send('set-mode', val),
    setPassword: (val) => ipcRenderer.send('set-password', val),
    setUsername: (val) => ipcRenderer.send('set-username', val),
    setBlendAspect: (val) => ipcRenderer.send('set-blendaspect', val),
    setAspect: (val) => ipcRenderer.send('set-aspect', val),
    setImg1Source: (val) => ipcRenderer.send('set-img1source', val),
    setImg2Source: (val) => ipcRenderer.send('set-img2source', val),
    setImg3Source: (val) => ipcRenderer.send('set-img3source', val),
    setImg4Source: (val) => ipcRenderer.send('set-img4source', val),
    setImg5Source: (val) => ipcRenderer.send('set-img5source', val),
    setDescFolder: (val) => ipcRenderer.send('set-descfolder',val),
    setDescSaveFolder: (val) => ipcRenderer.send('set-descsavefolder',val),
    setStylize: (val) => ipcRenderer.send('set-stylize', val),
    setChaos: (val) => ipcRenderer.send('set-chaos', val),
    setLoops: (val) => ipcRenderer.send('set-loops', val),
    setInterval: (val) => ipcRenderer.send('set-interval', val),
    setBlendnum: (val) => ipcRenderer.send('set-blendnum', val),
    setDiscordChatUrl: (val) => ipcRenderer.send('set-discordchaturl', val),
    selectFolder: () => ipcRenderer.invoke('dialog:openDirectory'),
    selectFile: () => ipcRenderer.invoke('dialog:openFile'),
    login: (val) => ipcRenderer.send('login', val),
    loadSettings: (callback) => ipcRenderer.on('load-settings', callback),
    loggedin: (callback) => ipcRenderer.on('loggedin', callback),
    setPrompts: (val) => ipcRenderer.send('set-prompts', val),
    generatePrompts: (val) => ipcRenderer.send('generate', val),
    addListFile: (val) => ipcRenderer.invoke('dialog:selectFile'),
    removeListFile: (val) => ipcRenderer.send('remove-listfile', val),
    setOverride: (val) => ipcRenderer.send('set-override', val),
    setPromptCount: (val) => ipcRenderer.send('set-promptcount', val),
    help: () => ipcRenderer.send('help'),
    addPermutationFile: (val) => ipcRenderer.invoke('dialog:permutefile'),
    removePermutationFile: (val) => ipcRenderer.send('remove-permutationfile', val),
    generatePermutations: (val) => ipcRenderer.send('permutate', val),
    setBotuser: (val) => ipcRenderer.send('set-botuser', val),
    setBotPassword: (val) => ipcRenderer.send('set-botpassword', val),
    setImgWeight: (val) => ipcRenderer.send('set-imageweight', val),
    setVersion: (val) => ipcRenderer.send('set-version', val),
    setDescPrompts: (val) => ipcRenderer.send('set-descprompts', val),
    setDescKeywords: (val) => ipcRenderer.send('set-desckeywords', val),
    setDescArtists: (val) => ipcRenderer.send('set-descartists', val),
    setDescPhrases: (val) => ipcRenderer.send('set-descphrases', val),
    setDescWeights: (val) => ipcRenderer.send('set-descweights', val),
    setDescInterval: (val) => ipcRenderer.send('set-describeinterval', val),
    setSaveGeneration: (val) => ipcRenderer.send('save-generation', val),
    setSavePermutation: (val) => ipcRenderer.send('save-permutation', val)
    // changepass: (val) => ipcRenderer.send('changepass', val)
})
