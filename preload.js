const { contextBridge, ipcRenderer } = require('electron')
contextBridge.exposeInMainWorld('electronAPI', {
    login: () => ipcRenderer.send('login'),
    mainmenuChoice: (val) => ipcRenderer.send('change-page', val),
    help: () => ipcRenderer.send('help'),
    promptgenLoaded: (callback) => ipcRenderer.on('promptgen-loaded',callback),
    promptgenMenuChoice: (val) => ipcRenderer.send('promptgen-tab-selected',val),
    promptgenAddGenFile: () => ipcRenderer.invoke('promptgen-add-keywords-file'),
    promptgenGenerate: (val) => ipcRenderer.send('promptgen-generate',val),
    promptgenLoadGenFile: (callback) => ipcRenderer.invoke('promptgen-load-gen-file', callback),
    setShouldSaveGenFile: (val) => ipcRenderer.send('promptgen-save-promptfile',val),
    promptgenSetCount: (val) => ipcRenderer.send('promptgen-gen-amount',val),
    promptgenAddCombinationGenFile: () => ipcRenderer.invoke('promptgen-combination-add-keywords-file'),
    promptgenCombinationGenerate: (val) => ipcRenderer.send('promptgen-combination-generate',val),
    promptgenLoadCombinationGenFile: (callback) => ipcRenderer.invoke('promptgen-combination-load-gen-file', callback),
    bingLoaded: (callback) => ipcRenderer.on('bing-loaded',callback),
    bingLoadPrompts: () => ipcRenderer.invoke('bing-loadprompts'),
    bingSetWaitTime: (val) => ipcRenderer.send('bing-set-waittime',val),
    bingSetEmail: (val) => ipcRenderer.send('bing-set-email',val),
    bingSetPassword: (val) => ipcRenderer.send('bing-set-password',val),
    setBingDownloadPath: (callback) => ipcRenderer.invoke('bing-set-savepath',callback),
    startBing: () => ipcRenderer.send('bing-start'),
    midjourneyLoaded: (callback) => ipcRenderer.on('midjourney-loaded',callback),
    setMidjourneyEmail: (val) => ipcRenderer.send('midjourney-set-email',val),
    setMidjourneyPassword: (val) => ipcRenderer.send('midjourney-set-password',val),
    setMidjourneyUrl: (val) => ipcRenderer.send('midjourney-set-url',val),
    setMidjourneyDescribeWaittime: (val) => ipcRenderer.send('midjourney-describe-waittime',val),
    setMidjourneyDescribeSavefolder: () => ipcRenderer.invoke('midjourney-describe-set-savepath'),
    setMidjourneyDescribeSavePhrases: (val) => ipcRenderer.send('midjourney-describe-savephrases',val),
    setMidjourneyDescribeSavePrompts: (val) => ipcRenderer.send('midjourney-describe-saveprompts',val),
    setMidjourneyDescribeSaveKeywords: (val) => ipcRenderer.send('midjourney-describe-savekeywords',val),
    setMidjourneyDescribeSaveArtists: (val) => ipcRenderer.send('midjourney-describe-saveartists',val),
    setMidjourneyDescribeSaveWeights: (val) => ipcRenderer.send('midjourney-describe-saveweights',val),
    setMidjourneyDescribeSource: () => ipcRenderer.invoke('midjourney-describe-set-sourcepath'),
    startMidJourney: (val) => ipcRenderer.send('midjourney-start', val),
    setMidjourneyBlendWaittime: (val) => ipcRenderer.send('midjourney-blend-set-waittime',val),
    setMidjourneyBlendSavepath: (callback) => ipcRenderer.invoke('midjourney-blend-set-savepath',callback),
    setMidjourneyBlendAspectratio: (val) => ipcRenderer.send('midjourney-blend-set-aspectratio',val),
    setMidjourneyBlendNumblends: (val) => ipcRenderer.send('midjourney-blend-set-numblends',val),
    setMidjourneyBlendImg1Path: (callback) => ipcRenderer.invoke('midjourney-blend-set-img1path',callback),
    setMidjourneyBlendImg2Path: (callback) => ipcRenderer.invoke('midjourney-blend-set-img2path',callback),
    setMidjourneyBlendImg3Path: (callback) => ipcRenderer.invoke('midjourney-blend-set-img3path',callback),
    setMidjourneyBlendImg4Path: (callback) => ipcRenderer.invoke('midjourney-blend-set-img4path',callback),
    setMidjourneyBlendImg5Path: (callback) => ipcRenderer.invoke('midjourney-blend-set-img5path',callback),
    loadMidjourneyPrompts: (callback) => ipcRenderer.invoke('midjourney-loadprompts', callback),
    setMidjourneyPromptWaittime: (val) => ipcRenderer.send('midjourney-set-waittime',val),
    setMidjourneyPromptSavepath: (callback) => ipcRenderer.invoke('midjourney-prompt-set-savepath',callback),
    midjourneyTabChoice: (val) => ipcRenderer.send('midjourney-tab-clicked',val),
    removeListFile: (index) => ipcRenderer.send('promptgen-removelistfile', index),
    removePermutationFile: (index) => ipcRenderer.send('promptgen-combination-removelistfile', index),
    promptgenLoadFileList: (data) => ipcRenderer.on('promptgen-filelist-load', data),
    promptgenLoadCombinationFileList: (data) => ipcRenderer.on('promptgen-combination-filelist-load', data),
})
